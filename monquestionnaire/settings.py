"""
Django settings for monquestionnaire project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# --- Chemins ---
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Charge le fichier .env ---
load_dotenv(dotenv_path=BASE_DIR / '.env')

# --- Clé secrète et mode DEBUG ---
SECRET_KEY = os.environ.get('SECRET_KEY', 'changeme')
DEBUG = os.environ.get('DEBUG', 'False') == 'True'


# --- ALLOWED_HOSTS ---
if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = [
        'monquestionnaire-production.up.railway.app',
        '127.0.0.1',
        'localhost'
    ]

    CSRF_TRUSTED_ORIGINS = [
        'https://monquestionnaire-production.up.railway.app',
        'http://127.0.0.1:8000',
    ]

# --- Applications installées ---
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "questionnaire",
    "django_extensions",
]

# --- Middleware ---
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "monquestionnaire.urls"

# --- Templates ---
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "monquestionnaire.wsgi.application"

import dj_database_url
import os

# Récupération des variables d'environnement
RAILWAY_ENV = os.getenv("RAILWAY_ENVIRONMENT", "False").lower() == "true"

# Toujours utiliser DATABASE_URL si présente
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL and RAILWAY_ENVIRONMENT:
    # Recomposer l'URL depuis les variables Railway si DATABASE_URL absente
    PROD_DB_USER = os.getenv("PROD_DB_USER")
    PROD_DB_PASSWORD = os.getenv("PROD_DB_PASSWORD")
    PROD_DB_HOST = os.getenv("PROD_DB_HOST")
    PROD_DB_PORT = os.getenv("PROD_DB_PORT")
    PROD_DB_NAME = os.getenv("PROD_DB_NAME")

    if all([PROD_DB_USER, PROD_DB_PASSWORD, PROD_DB_HOST, PROD_DB_PORT, PROD_DB_NAME]):
        DATABASE_URL = f"postgresql://{PROD_DB_USER}:{PROD_DB_PASSWORD}@{PROD_DB_HOST}:{PROD_DB_PORT}/{PROD_DB_NAME}"
    else:
        raise Exception("Variables PROD_DB_* manquantes dans le .env")

# --------------------------------------------------
# Configuration Django DATABASES
# --------------------------------------------------
if DATABASE_URL:
    # Analyse l'URL pour désactiver SSL si tunnel local
    from urllib.parse import urlparse, urlunparse, parse_qs, urlencode

    parsed = urlparse(DATABASE_URL)
    query = parse_qs(parsed.query)

    # Si host local (tunnel), on désactive SSL
    if parsed.hostname in ["127.0.0.1", "localhost"]:
        query["sslmode"] = ["disable"]
    else:
        query["sslmode"] = ["require"]

    new_query = urlencode(query, doseq=True)
    DATABASE_URL_MOD = urlunparse(
        (parsed.scheme, parsed.netloc, parsed.path, parsed.params, new_query, parsed.fragment)
    )

    DATABASES = {
        "default": dj_database_url.parse(DATABASE_URL_MOD, conn_max_age=600)
    }
else:
    # Configuration locale si pas de DATABASE_URL
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("LOCAL_DB_NAME"),
            "USER": os.getenv("LOCAL_DB_USER"),
            "PASSWORD": os.getenv("LOCAL_DB_PASSWORD"),
            "HOST": os.getenv("LOCAL_DB_HOST", "127.0.0.1"),
            "PORT": os.getenv("LOCAL_DB_PORT", "5432"),
        }
    }
        # --- Validation des mots de passe ---
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# --- Internationalisation ---
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# --- Fichiers statiques ---
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Optionnel : compression et cache
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# --- Sécurité HTTPS pour prod ---
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# --- Clé primaire par défaut ---
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

import logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'django-error.log',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'ERROR',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'questionnaire': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}










